Installation
============

The only two requirements not contained in this repository are Python 2.7 and VirtualEnv. The virtual environment contains all the necessary packages for the Python file.  To load the virtualenv, in the Mac terminal type `source outfirst/bin/activate`  (note: you may have to install virtualenv first, it's been so long since I've done that I've forgotten). For Mac, Python comes preinstalled.

Additionally, the python application must authenticate with Google's webserver.  This is a rather complicated process, which involves enabling the Google Analytics account to have API access via the 'Google Console'.  (Aside: I believe, but am not certain, that it is possible to automate this process later.)  What is necessary for the app to run is there to be a client_secrets.json file in the same folder as analytics.py.

Some info:  https://developers.google.com/api-client-library/python/guide/aaa_client_secrets

https://code.google.com/p/google-apps-manager/wiki/CreatingClientSecretsFile

Running
=======

This program is still actively in development.  When run, it will eject the user into the terminal (via pdb.set_trace()) after the data has been loaded for the default account.

  python analytics.py


Changelog
==========
-Build output system that renders utilizing HTML templates (Jinja)
-Automatically calculate variable date differences to query Google.
-Add ease-of-use methods to do basic calls like "pageviews by week" and such
---> Abstract away from excessie param use by having methods like "get_weekly_pageview()"
-Add ability for template rendering to be able to be fed numerous tables.
-->A for-loop over a list containing template_data objects fed into the fn, or explicit table calls?
-Remove template rendering to a separate class after it's written (during early dev it's in AnalyticsWrapper)
-Setup multiple account/site management (refactor 'get_first_profile_id')